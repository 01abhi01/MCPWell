# Enhanced Database MCP Server - Simplified SSP Tool Definitions
# YAML-based tool definitions for SSP-only architecture

metadata:
  name: "SSP Database MCP Tools"
  version: "3.0.0"
  description: "Simplified 3-tool architecture - All operations via SSP API endpoints"
  created_date: "2025-08-19"
  architecture: "SSP-First"

# =============================================================================
# CORE SSP MCP TOOL DEFINITIONS (3 Tools Only)
# =============================================================================

tools:
  ssp_portal_interaction:
    name: "ssp_portal_interaction"
    description: "Primary SSP portal API interaction tool - handles all operations through SSP endpoints including natural language processing"
    category: "ssp_operations"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "ssp_portal_interaction"
    input_schema:
      type: "object"
      properties:
        operation_type:
          type: "string"
          enum: ["natural_language_request", "api_call", "workflow_execution", "performance_analysis", "backup_operation", "query_execution"]
          description: "Type of SSP operation to perform"
        endpoint:
          type: "string"
          description: "SSP API endpoint path (e.g., /api/v1/databases/query)"
        request_method:
          type: "string"
          enum: ["GET", "POST", "PUT", "DELETE", "PATCH"]
          default: "GET"
          description: "HTTP method for SSP API call"
        parameters:
          type: "object"
          description: "Parameters for SSP API call or natural language input"
          properties:
            user_input:
              type: "string"
              description: "Natural language request (for operation_type: natural_language_request)"
            filters:
              type: "object"
              description: "Query filters for SSP API"
            targets:
              type: "array"
              items:
                type: "string"
              description: "Target resources (databases, tables, etc.)"
            options:
              type: "object"
              description: "Additional operation options"
        portal_id:
          type: "string"
          default: "default_ssp"
          description: "SSP portal identifier"
        session_id:
          type: "string"
          default: "default_session"
          description: "Session identifier for tracking"
      required: ["operation_type"]
    examples:
      - input:
          operation_type: "natural_language_request"
          parameters:
            user_input: "Show me all production databases"
          session_id: "user_123"
        description: "Natural language query via SSP API"
      - input:
          operation_type: "api_call"
          endpoint: "/api/v1/databases/list"
          request_method: "GET"
          parameters:
            filters:
              environment: "production"
        description: "Direct SSP API call"

  inventory_metadata_interaction:
    name: "inventory_metadata_interaction"
    description: "Database and resource inventory management via SSP APIs - handles all metadata operations through SSP endpoints only"
    category: "ssp_inventory"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "inventory_metadata_interaction"
    input_schema:
      type: "object"
      properties:
        inventory_action:
          type: "string"
          enum: ["list", "detail", "search", "health_check", "metadata_fetch", "schema_analyze"]
          default: "list"
          description: "Inventory operation to perform via SSP API"
        resource_types:
          type: "array"
          items:
            type: "string"
            enum: ["databases", "tables", "schemas", "indexes", "views", "procedures"]
          default: ["databases"]
          description: "Types of resources to query via SSP"
        filters:
          type: "object"
          properties:
            environment:
              type: "string"
              enum: ["development", "staging", "production", "all"]
              default: "all"
            health_status:
              type: "string"
              enum: ["healthy", "warning", "critical", "all"]
              default: "all"
            portal_specific:
              type: "object"
              description: "Portal-specific filter parameters"
        include_metadata:
          type: "boolean"
          default: true
          description: "Include detailed metadata in SSP API response"
        include_health_status:
          type: "boolean"
          default: true
          description: "Include health status in SSP API response"
        portal_ids:
          type: "array"
          items:
            type: "string"
          description: "Specific SSP portal IDs to query"
        ai_insights:
          type: "boolean"
          default: false
          description: "Generate AI insights from inventory data"
      required: ["inventory_action"]
    examples:
      - input:
          inventory_action: "list"
          resource_types: ["databases"]
          filters:
            environment: "production"
            health_status: "critical"
          ai_insights: true
        description: "List critical production databases with AI insights"
      - input:
          inventory_action: "metadata_fetch"
          resource_types: ["tables", "schemas"]
          filters:
            portal_specific:
              database_name: "user_data"
        description: "Fetch metadata for specific database via SSP"

  unified_response:
    name: "unified_response"
    description: "Consolidated response aggregation and AI-powered insights combining multiple SSP operations"
    category: "ssp_aggregation"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "unified_response"
    input_schema:
      type: "object"
      properties:
        response_type:
          type: "string"
          enum: ["summary", "detailed", "analysis", "recommendations", "workflow_plan"]
          default: "summary"
          description: "Type of unified response to generate"
        session_id:
          type: "string"
          default: "default_session"
          description: "Session to aggregate responses from"
        include_recommendations:
          type: "boolean"
          default: true
          description: "Include AI-powered recommendations"
        include_workflow_suggestions:
          type: "boolean"
          default: true
          description: "Include workflow suggestions based on SSP operations"
        context_operations:
          type: "array"
          items:
            type: "string"
          description: "Specific operations to include in unified response"
        aggregation_options:
          type: "object"
          properties:
            time_window:
              type: "string"
              enum: ["last_hour", "last_day", "session_only", "all"]
              default: "session_only"
            priority_filter:
              type: "string"
              enum: ["high", "medium", "low", "all"]
              default: "all"
            include_metrics:
              type: "boolean"
              default: true
      required: ["response_type"]
    examples:
      - input:
          response_type: "analysis"
          session_id: "user_123"
          include_recommendations: true
          aggregation_options:
            time_window: "session_only"
            include_metrics: true
        description: "Generate analysis of all SSP operations in session"
      - input:
          response_type: "workflow_plan"
          context_operations: ["database_query", "performance_analysis"]
          include_workflow_suggestions: true
        description: "Create workflow plan based on recent SSP operations"

# =============================================================================
# SSP TOOL CONFIGURATION SETTINGS
# =============================================================================

tool_settings:
  default_timeout_seconds: 300
  max_concurrent_tools: 3  # Reduced for 3-tool architecture
  enable_caching: true
  cache_ttl_seconds: 3600
  ssp_primary: true  # All operations via SSP APIs
  
  categories:
    ssp_operations:
      description: "Primary SSP portal operations and natural language processing"
      color: "#2196F3"
      icon: "🔌"
      priority: 1
    ssp_inventory:
      description: "Inventory and metadata operations via SSP APIs"
      color: "#FF9800"
      icon: "📊"
      priority: 2
    ssp_aggregation:
      description: "Unified response aggregation and AI insights"
      color: "#4CAF50"
      icon: "🎯"
      priority: 3

  validation:
    required_fields_validation: true
    schema_validation: true
    type_checking: true
    ssp_endpoint_validation: true

  monitoring:
    track_usage: true
    log_performance: true
    alert_on_errors: true
    metrics_collection: true
    ssp_api_metrics: true

# =============================================================================
# SSP INTEGRATION CONFIGURATION
# =============================================================================

integration:
  ssp_primary_mode: true
  langchain_tools: true
  langgraph_workflows: true
  gemini_llm: true
  portal_manager: true
  intent_classifier: true
  conversation_flow: true
  
  ssp_endpoints:
    base_url: "${SSP_BASE_URL}"
    api_version: "v1"
    authentication:
      type: "bearer_token"
      token: "${SSP_API_TOKEN}"
    
    core_endpoints:
      databases: "/api/v1/databases"
      operations: "/api/v1/operations"
      analytics: "/api/v1/analytics"
      metadata: "/api/v1/metadata"
      health: "/api/v1/health"

# =============================================================================
# ERROR HANDLING
# =============================================================================

error_handling:
  retry_attempts: 3
  retry_delay_seconds: 5
  fallback_behavior: "graceful_degradation"
  error_reporting: true
  user_friendly_messages: true
  ssp_specific_errors: true
      properties:
        database_names:
          type: "array"
          items:
            type: "string"
          description: "Specific databases to analyze"
        analysis_type:
          type: "string"
          enum: ["quick", "comprehensive", "predictive", "comparative"]
          default: "comprehensive"
        time_range:
          type: "object"
          properties:
            start_time:
              type: "string"
              format: "date-time"
            end_time:
              type: "string"
              format: "date-time"
            period:
              type: "string"
              enum: ["1h", "24h", "7d", "30d", "90d"]
              default: "24h"
        metrics:
          type: "array"
          items:
            type: "string"
            enum: ["cpu", "memory", "disk_io", "query_performance", "connections", "locks"]
          default: ["cpu", "memory", "query_performance"]
        ai_recommendations:
          type: "boolean"
          description: "Generate AI-powered optimization recommendations"
          default: true
        include_portal_data:
          type: "boolean"
          description: "Include data from integrated portals"
          default: true
      required: ["database_names"]
    examples:
      - input:
          database_names: ["production_users", "production_orders"]
          analysis_type: "predictive"
          time_range:
            period: "7d"
          ai_recommendations: true

  manage_portal_integration:
    name: "manage_portal_integration"
    description: "Manage integration with external self-service portals including discovery, registration, and health monitoring"
    category: "portal_management"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "manage_portal_integration"
    input_schema:
      type: "object"
      properties:
        action:
          type: "string"
          enum: ["list", "register", "unregister", "health_check", "discover_capabilities", "sync"]
          description: "Portal management action to perform"
        portal_id:
          type: "string"
          description: "Portal identifier (required for specific portal actions)"
        portal_config:
          type: "object"
          description: "Portal configuration for registration"
          properties:
            name:
              type: "string"
            base_url:
              type: "string"
            authentication:
              type: "object"
            capabilities:
              type: "array"
              items:
                type: "string"
            endpoints:
              type: "object"
        discovery_options:
          type: "object"
          properties:
            auto_generate_intents:
              type: "boolean"
              default: true
            create_workflow_steps:
              type: "boolean"
              default: true
            natural_language_patterns:
              type: "boolean"
              default: true
      required: ["action"]
    examples:
      - input:
          action: "health_check"
          portal_id: "analytics_portal"
        description: "Check health status of analytics portal"
      - input:
          action: "discover_capabilities"
          portal_id: "infrastructure_portal"
          discovery_options:
            auto_generate_intents: true

  get_compliance_report:
    name: "get_compliance_report"
    description: "Generate comprehensive compliance reports across all integrated portals with AI-powered analysis"
    category: "compliance_reporting"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "get_compliance_report"
    input_schema:
      type: "object"
      properties:
        compliance_frameworks:
          type: "array"
          items:
            type: "string"
            enum: ["SOX", "GDPR", "HIPAA", "PCI_DSS", "SOC2", "ISO27001"]
          description: "Compliance frameworks to include in report"
        scope:
          type: "object"
          properties:
            portals:
              type: "array"
              items:
                type: "string"
            databases:
              type: "array"
              items:
                type: "string"
            environments:
              type: "array"
              items:
                type: "string"
                enum: ["development", "staging", "production"]
        report_format:
          type: "string"
          enum: ["json", "pdf", "html", "excel"]
          default: "json"
        include_remediation:
          type: "boolean"
          description: "Include AI-generated remediation recommendations"
          default: true
        ai_risk_assessment:
          type: "boolean"
          description: "Include AI-powered risk assessment"
          default: true
      required: ["compliance_frameworks"]
    examples:
      - input:
          compliance_frameworks: ["GDPR", "SOX"]
          scope:
            environments: ["production"]
          include_remediation: true

  orchestrate_conversation_flow:
    name: "orchestrate_conversation_flow"
    description: "Manage conversational context and multi-turn interactions using LangGraph state management"
    category: "conversation_management"
    requires_confirmation: false
    implementation_class: "EnhancedMCPTools"
    implementation_method: "orchestrate_conversation_flow"
    input_schema:
      type: "object"
      properties:
        session_id:
          type: "string"
          description: "Conversation session identifier"
        conversation_action:
          type: "string"
          enum: ["start", "continue", "clarify", "confirm", "cancel", "summarize"]
          description: "Type of conversation action"
        user_message:
          type: "string"
          description: "User's message or response"
        context_data:
          type: "object"
          description: "Additional context for conversation"
          properties:
            previous_intent:
              type: "string"
            pending_operations:
              type: "array"
              items:
                type: "object"
            conversation_history:
              type: "array"
              items:
                type: "object"
        response_options:
          type: "object"
          properties:
            include_suggestions:
              type: "boolean"
              default: true
            max_suggestions:
              type: "integer"
              default: 3
            confidence_threshold:
              type: "number"
              default: 0.7
      required: ["session_id", "conversation_action"]
    examples:
      - input:
          session_id: "user_123_session"
          conversation_action: "continue"
          user_message: "Yes, proceed with the backup"
          context_data:
            previous_intent: "create_backup"

# =============================================================================
# TOOL CONFIGURATION SETTINGS
# =============================================================================

tool_settings:
  default_timeout_seconds: 300
  max_concurrent_tools: 10
  enable_caching: true
  cache_ttl_seconds: 3600
  
  categories:
    nlp_processing:
      description: "Natural language processing and intent classification"
      color: "#4CAF50"
      icon: "🧠"
    workflow_orchestration:
      description: "Multi-step workflow execution and orchestration"
      color: "#2196F3" 
      icon: "🔄"
    inventory_management:
      description: "Database and resource inventory management"
      color: "#FF9800"
      icon: "📊"
    safety_validation:
      description: "Safety checks and operation validation"
      color: "#F44336"
      icon: "🛡️"
    performance_analysis:
      description: "Performance monitoring and optimization"
      color: "#9C27B0"
      icon: "⚡"
    portal_management:
      description: "External portal integration and management"
      color: "#00BCD4"
      icon: "🔌"
    compliance_reporting:
      description: "Compliance monitoring and reporting"
      color: "#795548"
      icon: "📋"
    conversation_management:
      description: "Conversational context and flow management"
      color: "#607D8B"
      icon: "💬"

  validation:
    required_fields_validation: true
    schema_validation: true
    type_checking: true
    custom_validators: []

  monitoring:
    track_usage: true
    log_performance: true
    alert_on_errors: true
    metrics_collection: true

# =============================================================================
# INTEGRATION CONFIGURATION
# =============================================================================

integration:
  langchain_tools: true
  langgraph_workflows: true
  gemini_llm: true
  portal_manager: true
  intent_classifier: true
  conversation_flow: true

# =============================================================================
# ERROR HANDLING
# =============================================================================

error_handling:
  retry_attempts: 3
  retry_delay_seconds: 5
  fallback_behavior: "graceful_degradation"
  error_reporting: true
  user_friendly_messages: true
